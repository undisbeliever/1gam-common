# This file simplifies the building process of a SNES ROM using this API.
#
# The following VARIABALES determine the behaviour of the build process:
#    * ROM_NAME      - the name of the final rom (without extension)
#    * API_DIR       - the directory of the snesdev-common repo
#    * CONFIG        - the memory config to use
#    * SOURCE_DIR    - the location of the source
#    * RESOURCES_DIR - (optional) the location of the resources, can contain its own makefile
#    * TABLES_DIR    - (optional) the location of the pre-calculated tables, can contain its own makefile


# Disable Builtin rules
.SUFFIXES:
.DELETE_ON_ERROR:
MAKEFLAGS += --no-builtin-rules


ifneq ($(words $(ROM_NAME)), 1)
  $(error ROM_NAME cannot conatain a space)
endif


API_ROUTINE_DIR = $(API_DIR)/routines

SOURCES     = $(wildcard $(SOURCE_DIR)/*.s $(SOURCE_DIR)/*/*.s $(SOURCE_DIR)/*/*.s)
HEADERS     = $(wildcard $(SOURCE_DIR)/*.h $(SOURCE_DIR)/*/*.h)
INCLUDES    = $(wildcard $(SOURCE_DIR)/*.inc $(SOURCE_DIR)/*/*.inc)
INCLUDES   += $(wildcard $(SOURCE_DIR)/*.asm $(SOURCE_DIR)/*/*.asm)

BINARY      = bin/$(ROM_NAME).sfc
OBJECTS     = $(patsubst $(SOURCE_DIR)/%.s,obj/%.o,$(SOURCES))
API_HEADERS = $(wildcard $(patsubst %,$(API_ROUTINE_DIR)/%.h,$(API_MODULES)))
API_OBJECTS = $(patsubst %,obj/api/%.o,$(API_MODULES))
CONFIG_FILE = $(API_DIR)/config/$(CONFIG).cfg
OBJECT_DIRS = $(sort $(dir $(API_OBJECTS) $(OBJECTS)))


ifdef RESOURCES_DIR
  MAPS      = $(patsubst %.pcx,%.map, $(wildcard $(RESOURCES_DIR)/images8bpp/*.pcx))
  MAPS     += $(patsubst %.pcx,%.map, $(wildcard $(RESOURCES_DIR)/images4bpp/*.pcx))
  MAPS     += $(patsubst %.pcx,%.mp7, $(wildcard $(RESOURCES_DIR)/mode7/*.pcx))
  TILES     = $(patsubst %.pcx,%.8bpp,$(wildcard $(RESOURCES_DIR)/images8bpp/*.pcx))
  TILES    += $(patsubst %.pcx,%.4bpp,$(wildcard $(RESOURCES_DIR)/images4bpp/*.pcx))
  TILES    += $(patsubst %.pcx,%.8bpp,$(wildcard $(RESOURCES_DIR)/tiles8bpp/*.pcx))
  TILES    += $(patsubst %.pcx,%.4bpp,$(wildcard $(RESOURCES_DIR)/tiles4bpp/*.pcx))
  TILES    += $(patsubst %.pcx,%.2bpp,$(wildcard $(RESOURCES_DIR)/tiles2bpp/*.pcx))
  TILES    += $(patsubst %.pcx,%.pc7, $(wildcard $(RESOURCES_DIR)/mode7/*.pcx))
  PALETTES  = $(patsubst %.4bpp,%.clr,$(patsubst %.2bpp,%.clr, $(patsubst %.pc7,%.clr,$(TILES))))

  RESOURCES := $(MAPS) $(TILES) $(PALETTES)
else
  RESOURCES :=
endif


ifdef TABLES_DIR
  TABLES := $(patsubst %.py,%.inc, $(wildcard $(TABLES_DIR)/*.py))
else
  TABLES :=
endif



.PHONY: all
all: dirs resources tables $(BINARY)

$(BINARY): $(OBJECTS) $(API_OBJECTS)
	ld65 -vm -m $(@:.sfc=.memlog) -C $(CONFIG_FILE) -o $@ $^
	cd bin/ && ucon64 --snes --nhd --chk $(notdir $@)


$(OBJECTS): $(HEADERS) $(INCLUDES)
$(OBJECTS) $(API_OBJECTS): $(CONFIG_FILE) $(API_HEADERS)

$(OBJECTS) $(TABLES) $(RESOURCES): $(API_DIR)/Makefile.in Makefile


ifneq (,$(wildcard config.h))
  $(OBJECTS) $(API_OBJECTS): config.h
endif



obj/%.o: $(SOURCE_DIR)/%.s
	ca65 -I . -I $(API_DIR) -o $@ $<

obj/api/%.o: $(API_ROUTINE_DIR)/%.s
	ca65 -I . -I $(API_DIR) -o $@ $<

obj/api/math.o: $(wildcard $(API_ROUTINE_DIR)/math/*)



.PHONY: dirs
dirs: bin/ $(OBJECT_DIRS)

bin/ $(OBJECT_DIRS):
	mkdir $@



.PHONY: resources
resources: $(RESOURCES)

ifdef RESOURCES_DIR
  ifneq (,$(wildcard $(RESOURCES_DIR)/Makefile))
  resources:
	$(MAKE) -C $(RESOURCES_DIR)
  endif


  $(RESOURCES_DIR)/tiles2bpp/%.2bpp $(RESOURCES_DIR)/tiles2bpp/%.clr &: $(RESOURCES_DIR)/tiles2bpp/%.pcx
	pcx2snes -n -s8 -c4 -o4 $(basename $<)
	mv $(basename $<).pic $(basename $<).2bpp

  $(RESOURCES_DIR)/tiles4bpp/%.4bpp $(RESOURCES_DIR)/tiles4bpp/%.clr &: $(RESOURCES_DIR)/tiles4bpp/%.pcx
	pcx2snes -n -s8 -c16 -o16 $(basename $<)
	mv $(basename $<).pic $(basename $<).4bpp

  $(RESOURCES_DIR)/images4bpp/%.map $(RESOURCES_DIR)/images4bpp/%.4bpp images4bpp/%.clr &: $(RESOURCES_DIR)/images4bpp/%.pcx
	pcx2snes -r -s8 -c16 -screen $(basename $<)
	mv $(basename $<).pic $(basename $<).4bpp

  $(RESOURCES_DIR)/mode7/%.mp7 $(RESOURCES_DIR)/mode7/%.pc7 mode7/%.clr &: $(RESOURCES_DIR)/mode7/%.pcx
	pcx2snes -screen7 $(basename $<)
endif


ifneq (,$(wildcard $(SOURCE_DIR)/resources.s))
  obj/resources.o: $(RESOURCES)
else
  $(OBJECTS): $(RESOURCES)
endif



.PHONY: tables
tables: $(TABLES)

$(OBJECTS): $(TABLES)

%.inc: %.py
	python3 $< >| $@



.PHONY: clean
clean::
	$(RM) bin/$(BINARY) $(OBJECTS) $(API_OBJECTS)

ifdef RESOURCES_DIR
  ifneq (,$(wildcard $(RESOURCES_DIR)/Makefile))
	$(MAKE) -C $(RESOURCES_DIR) clean
  endif
endif
ifdef RESOURCES
	$(RM) $(RESOURCES)
endif
ifdef TABLES
	$(RM) $(TABLES)
endif


